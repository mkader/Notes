Iterators
---------
	- An iterator can be used to step through collections such as lists and arrays by using the yield keyword. 
	- Multiple iterators (must unique name) can be implemented on a class.  
	- The return type of an iterator must be IEnumerable, IEnumerator, IEnumerable<T>, or IEnumerator<T>.
	- The declaration can't have any ref or out parameters.
	- An iterator code by using a foreach statement or a LINQ query.
	- There are 3 types of Iterator blocks. A method body, An accessor body & An operator body

class Program {
	static void Main(string[] args) {
 	    //it will go DisplayOdd(), yield return 1, print 1, then it go DisplayOdd() yield return 2, print 2		
	
	    foreach (int i in DisplayOdd()) Console.WriteLine(i);
	    
	    foreach (int i in DisplayEven(21,30)) Console.WriteLine(i);
	    
	    DisplayDays d = new DisplayDays();
	    foreach (string i in d) Console.WriteLine(i);
	    
	    Zoo z = new Zoo();
	    foreach (Animal a in z) Console.WriteLine(a.name + " " + a.type);
	    foreach (Animal a in z.GetAnimalType(2)) Console.WriteLine(a.name + " " + a.type);

	}

	static IEnumerable<int> DisplayOdd() {
	    yield return 1;
	    yield return 3;
	    yield return 5;
	}

	static IEnumerable<int> DisplayEven(int s, int e) {
	    for (int i = s; i <= e; i++)
	    {
		if (i % 2 == 0) yield return i;
	    }
	}
}

//get a method
public class DisplayDays //:IEnumerable {
	private string[] days = {"M", "T", "W", "TH" ,"F", "S", "SU"};
	public IEnumerator<string> GetEnumerator() {
	    for(int i=0;i<days.Length;i++)
	    {
		yield return days[i];
	    }
	}
}

// a get accessor 
public class Zoo
{
	List<Animal> animals = new List<Animal>();

	public Zoo()
	{
	    animals.Add(new Animal { name = "Cow", type = 1 });
	    animals.Add(new Animal { name = "Dog", type = 2 });
	    animals.Add(new Animal { name = "Chicken", type = 1 });
	    animals.Add(new Animal { name = "Cat", type = 2 });
	}
	public IEnumerator<Animal> GetEnumerator()
	{
	    foreach (Animal a in animals) yield return a;
	}

	public IEnumerable<Animal> GetAnimalType(int i)
	{
	    foreach (Animal a in animals)
	    {
		if (a.type == i) yield return a;
	    }
	}
}

public class Animal
{
	public string name { get; set; }
	public int type { get; set; }
}

---------------------------------------------------------------------------	
Private setters (properties)
---------------
	- Old get and set
	  class Zoo{
	  	public string _name
	  	public setName(string name) { _name = name; }
	  	public getName() { return _name;}
	  }
	- properties
	  class Zoo{
	  	public string _name
	  	public string Name{ 
	  		set { _name = value; }
	  		get { return _name;}
	  }
	- enhanced properties
	  class Zoo{
	  	public string LastName { private set; get; } //Zoo.Lastname ="asd"//throw error
	  	public string Name{ set; get;}
	  }
	- tool to create fast properties from VS type prop[full,g,a]	
	- if name is not null, you set the validation like 
	public string Name {
		set { 
			if(string.IsNullOrEmpty(value){
				throw new Exception("Name cannot be empty");
			}
			this._Name= value;
		     }
		get {
			return string.IsNullOrEmpty(this._name)? "No Name" : this._Name;
		}
	}

---------------------------------------------------------------------------
Partial Types
-------------
	- allow us to split a class or struct, an interface or a method into 2 or more files. 
	  All these parts are then combines into a single class, when the application is compiled.
	
Partial Classes
----------------
	- Example. Create a exe or web form in VS, it creates 2 file, Form1.cs (developer code), 
	  Form1.designer.cs (system generated code).
	
	- PartialClass1.cs -> class PartialClass   { } 	
	  PartialClass2.cs -> class PartialClass   { } , 
	  compile ERROR, already contain a definition of 'PartialClass'
	
	- PartialClass1.cs -> partial class PartialClass   { } 	
	  PartialClass2.cs -> class PartialClass   { } 
	  compile ERROR, missing partial modifier or definition of type 'PartialClass'	
	  [must use the partial keyword all the files]
	  
	- PartialClass1.cs -> public partial class PartialClass   { } 	
	  PartialClass2.cs -> internal partial class PartialClass   { } 
	  compile ERROR, parital declarations of 'PartialClass' have conflicting different modifiers	
	  [must use the same access modifiers all the files]
	
	- PartialClass1.cs -> public abstract[sealed] partial class PartialClass   { } 	
	  PartialClass2.cs -> partial class PartialClass   { } 
	  Program.cs -> PartialClass pc = new PartialClass(); //throws error, 
	  	[because PartialClass2.cs class considered abstract or sealed or inherit class, see example 2,  3, 4]
	  	
	- PartialClass1.cs -> partial class PartialClass :Customer  { } 	
	  PartialClass2.cs -> partial class PartialClass :Emplyee { } 
	  class Customer {} , class Employee {}
	  [Compile ERROR, does not support multiple inheritance]
	  
	- PartialClass1.cs -> partial class PartialClass :ICustomer  { } 	
	  PartialClass2.cs -> partial class PartialClass :IEmployee { } 
	  interface ICustomer {  void CustomerMethod();} , interface IEmployee {  void EmployeeMethod();}
	  [Compile ERROR, all interface mehtods must declare any one class, see example 5]
	  
	-Example 1//PartialClass1.cs 
	partial class PartialClass{ public string GetName() { return FirstName + " " + LastName; } }

	//PartialClass2.cs
	partial class PartialClass{ public string FirstName { get; set; } public string LastName { get; set; } }
	
	//Program.cs
	 static void Main(string[] args)
	{
	    PartialClass pc = new PartialClass();
	    pc.FirstName = "first";
	    pc.LastName = "last";
	    Console.WriteLine(pc.GetName());
        }
        
        -Example 2 parital abstract
        public abstract partial class PartialClass { public string GetName;}
        partial class PartialClass { public string FirstName { get; set; } public string LastName { get; set; } }
        class Sample : PartialClass { public string GetName() { return FirstName + " " + LastName; } }}
        main() {Sample s = new Sample(); s.FirstName = "first"; s.LastName = "last"; s.GetName();}
        
        -Example 3 parital sealed
        public sealed partial class PartialClass :Sample { public string GetName() { return FirstName + " " + LastName; } }}
        partial class PartialClass { public string FirstName { get; set; } public string LastName { get; set; } }
	class Sample { public string GetFullName() { return "Testting"; } }}
        main() {PartialClass s = new PartialClass(); s.FirstName = "first"; s.LastName = "last"; s.GetName(); s.GetFullName();}
        
        -Example 4 parital inherit class
	public partial class PartialClass :Sample { }
	partial class PartialClass { }
	class Sample { public string GetFullName() { return "Testting"; } }}
        main() {PartialClass s = new PartialClass(); s.GetFullName();}
        
        -Example 5 parital interface class
	PartialClass1.cs -> partial class PartialClass :ICustomer  { public void EMethod(){} public void CMethod(){} } 
	PartialClass2.cs -> partial class PartialClass :IEmployee { } 
	interface ICustomer {  void CMethod();} , interface IEmployee {  void EMethod();}
	
Partial Methods
----------------	
	- it contains 2 part, one is the definition (declaration or signature) part (any class) 
	  and the other one is the implementation (any class).
	- if method only has definition & no implementation (no compiler error), if method calls, 
	  compiler will ignore the definition and also ignor the call part also.
	  public partial class PartialClass {
	          partial void Display(); //compiler will ignore, no implementation
	  
	          public void Print()
	          {
	              Display(); //call ignore
	          }
    	  }
	- if method only parital implementation & no definition (compiler error), it is non-parital method
	  partial void Display() { }
	  
	- partial method cannot have access modifiers or the virtual, abstract, override, new, sealed or extern modifiers 		
	  public partial void Display(); //error, can't be public modifiers
	- partial method return type must be void, other wise comiple error.
	- arguments must be same both places.
	- partial method method must be declared within a partial class or struct
  	  public  class PartialClass {partial void Display(); }	 //error
	- multiple implementation (2 class same method ) but only one declaration, //compile error.
	
	Example 
	PartialClass1.cs
	public partial class PartialClass
	{
	        partial void Display(int i);
	
	        public void Print()
	        {
	            Console.WriteLine("Print");
	            Display(10);
	        }
         }
         
         PartialClass2.cs
         partial class PartialClass
	 {
	         partial void Display(int i)
	         {
	             Console.WriteLine("Display " + i);
	         }
    	}
    	
    	Program.cs
    	PartialClass pc = new PartialClass();
	pc.Print(); //Print Display
	
	//if  "partial void Display(){Console.WriteLine("Display");}" in PartialClass1.cs, it will give output
