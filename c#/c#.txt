Favor async/await over Task continuations (AV2235) 
Using the new C# 5.0 keywords results in code that can still be read sequentially and also improves maintainability a lot, even if you need to chain multiple asynchronous operations. For example, rather than defining your method like this:

public Task<Data> GetDataAsync()
{
  return MyWebService.FetchDataAsync()
    .ContinueWith(t => new Data(t.Result));
}
define it like this:

public async Task<Data> GetDataAsync()
{
  string result = await MyWebService.FetchDataAsync();
  return new Data(result);
}
Tip: Even if you need to target .NET Framework 4.0 you can use the async and await keywords. Simply install the Async Targeting Pack.
-------------------------------------------


Use lambda expressions instead of anonymous methods (AV2221) 
Lambda expressions provide a more elegant alternative for anonymous methods. So instead of:

Customer customer = Array.Find(customers, delegate(Customer customer)
{
    return customer.Name == "Tom";
});
use a lambda expression:

Customer customer = Array.Find(customers, customer => customer.Name == "Tom");
Or even better:

var customer = customers.Where(customer => customer.Name == "Tom").FirstOrDefault();
---------------------------------------------------
Avoid LINQ for simple expressions (AV2220) 
Rather than:

var query = from item in items where item.Length > 0 select item;
prefer the use of extension methods from the System.Linq namespace:

var query = items.Where(item => item.Length > 0);
Since LINQ queries should be written out over multiple lines for readability, the second example is a bit more compact.
----------------------------------------------------------
Beware of async/await deadlocks in single-threaded environments (AV1835) 
Consider the following asynchronous method:

private async Task GetDataAsync()
{
    var result = await MyWebService.GetDataAsync();
    return result.ToString();
}
Now when an ASP.NET MVC controller action does this:

public ActionResult ActionAsync()
{
    var data = GetDataAsync().Result;
    
    return View(data);  
}
You end up with a deadlock. Why? Because the Result property getter will block until the async operation has completed, but since an async method will automatically marshal the result back to the original thread and ASP.NET uses a single-threaded synchronization context, they'll be waiting on each other. A similar problem can also happen on WPF, Silverlight or a Windows Store C#/XAML app. Read more about this here.