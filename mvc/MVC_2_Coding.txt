Passing QueryString or Form ('http://localhost/MVC4App/Home/Index?name1=teert&name=ertret')
 ---------------------------
	  Asp.net MVC will automatically pass any query string or form post parameters names "name" to index action method.
	  public string Index() { return " Name= " + Request.QueryString["name"];}   OR
	  public string Index(string name) { return " Name= " + name} => Name= test 
	   - "name" should match with parameter query string name "name"
	  public string Index(int id) { return "Id " + id + " Name= " + Request.QueryString["name"];} OR
	  public string Index(int id, string name) { return "Id " + id + " Name= " + name;} => Id 10 Name= test
	  public string Index(string n) { return n + " " + Request.QueryString["n"];} => both will print same name value.
	    - http://localhost/MVC4App/Home/Index/10 = > print "Id 10 Name=", throw error if name is not string type, because
	      string is nullable type

routes.IgnoreRoute("{resource}.axd/{*pathInfo}"); OR Enable Tracing
--------------------------------
   - Enabling trace Web.config, <system.web> <trace enabled="true" pageOutput="false"/> ...
     -------------------------
     pageOutput false means, I don't want the trace messages to be returned to the end of the page.		
     Trace message will be returned to a trace.axd file, access http://localhost/MVC4App/trace.axd
   - so the trace.axd request is ignored and it is not pass through "routes.MapRoute(name: "Default",..."		     

ActionLink HTML helper multi table
----------------------------------
	@Html.ActionLink(str linktext, str actionName, str controllerName, obj routeValues, obj htmlAttrbuites)

	MVC4App/FileSet/Index
		List of File Set IDs
		1 => MVC4App/FileType/Index/1 
		<li>@Html.ActionLink(f.Name, "Index", "FileType", new { FileSetID = f.FileSetID },null)</li>
		//null is for no html attributes
	
	MVC4App/FileType/Index/1
		List of File Type IDs
		1 => MVC4App/FileType/Details/1 
		<li>@Html.ActionLink(ft.Description, "Details", new { id = ft.FileTypeID })</li>  
		@Html.ActionLink("Back to File Set", "Index", "FileSet")    

	MVC4App/FileType/Details/1
		File Type Details
		@Html.ActionLink("Back to List", "Index", "FileType", new {FileSetID= @Model.FileSetID}, null)	

Using business objects as model , List, View, Delete, Create, Edit
-----------------------------------------------------------------
	Business objects contain both state(data) and behaviour, that is logic specific to the business. 
	
	BusinessLayers Project

	Employee.cs
	namespace BusinessLayers {
	    public class Employee {
		public int ID { get; set; }
		public string Name { get; set; }
		public DateTime DateOfBirth { get; set; } //DateTime? DateOfBirth { get; set; } avoid nullable error,see below
	
	EmployeeLayers.cs	
	namespace BusinessLayers {
	    public class EmployeeLayers {
		public IEnumerable<Employee> Employees // connect db to get list of employees usign SP
	
	EmployeeController.cs 
	using BusinessLayers; //add 'BusinessLayers' reference in MVC5 project		
	namespace MVC5.Controllers {
	    public class EmployeeController : Controller {
		public ActionResult Index() {
		    EmployeeLayers el = new EmployeeLayers();
		    List<Employee> e = el.Employees.ToList();

		    return View(e);
	
	Employee.cshtml ( used scaffolding 'List' Template)
	@model IEnumerable<BusinessLayers.Employee>		

Creating a view to insert data (HttpGet, HttpPost, FormCollections, RedirectToAction, DropDownList, UpdateModel, ModelState)
---------------------------------------------------------------------------------------------------
	EmployeeLayers.cs	
	public void AddEmployee(Employee employee) // connect db to insert record usign SP

	- HttpGet attribute, the controller action method will only respond to a get request of this URL
	EmployeeController.cs
	[HttpGet]
        public ActionResult Create(){ return View();}
	
	- HttpPost attribute, which is going to receive the posted form data.
	- FormCollection class will receive the posted form values in the controller action method, in key/value pairs.
	  Keys & values can be accessed using key names or index. 
	
        [HttpPost]
        public ActionResult Create(FormCollection fc) {
            //Getting all form colleciton key/value pair code
            /*foreach(String key in fc.AllKeys) { Response.Write(key + "  " + fc[key] + "<br/>"); }*/
	
	    //instead of looping, pass the form input name value	
            Employee emp = new Employee() {
                Name = fc["Name"],
                Gender = fc["Gender"],
                City = fc["City"],
                DateOfBirth = DateTime.Parse(fc["DateOfBirth"])
            };

            EmployeeLayers el = new EmployeeLayers();
            el.AddEmployee(emp);

	    //Redirect the user back to the index action method.		
            return RedirectToAction("Index");
        }        
	
	- Change text box (@Html.EditorFor) to @Html.DropDownList

	Create.cshtml
	@model BusinessLayers.Employee

	@Html.DropDownList("Gender",...)
	@*@Html.EditorFor(model => model.Gender, new { htmlAttributes = new { @class = "form-control" } })*@

Difference between updatemodel and tryupdatemodel
=================================================
	public ActionResult Create_Post() {
            Employee emp = new Employee();
            UpdateModel(emp);

            if (ModelState.IsValid) ....
	- Submit the form, throw error ("The model of type 'BusinessLayers.Employee' could not be updated."), that is because
          the datetime is  structure, meaning it's a value type and a non nullable value type, just add ? to fix nullable value type
	  
	- Submit, throw error (Procedure or function 'spAddEmployee' expects parameter '@Name', which was not supplied.), 
	  SP(sp_helptext spAddEmployee(view sp code)) parameters are required, to change to optional, add "null". 
	   @Name nvarchar(50) =null, ..
	  	
	- Submit, Record inserts with null value, but list page throw error (Object cannot be cast from DBNull to other types.), 
	  Reason when reteriving null value, converting null to date time. To fix, check dbnull (!(rdr["DateOfBirth"] is DBNull))
	  
	- Now Record list with null value
	
	- Install entityframework on BusinessLayers project, name is required, add [Required] attributes
        [Required]
        public string Name { get; set; } ...
        Submit, throw error (The model of type 'BusinessLayers.Employee' could not be updated.), 
        to fix use TryUpdateModel, will return boolean
	    Employee emp = new Employee();
            TryUpdateModel(emp);	
	
	- Submit, the each field required message("The Name field is required.") will shown on the form 
	
	- The difference is UpdateModel() throws an exception if validation fails, 
	  where as TryUpdateModel() will never throw an exception. 
	  The similarity is, both the functions are used to update the Model with the Form values and perform the validations.
	
	- Is it mandatory to use "UpdateModel()" or "TryUpdateModel()" function to update the Model? NO.
	  The above method can be re-written as shown below and we get the same behaviour.
	public ActionResult Create_Post(Employee emp) {
            //Employee emp = new Employee();
            //TryUpdateModel(emp);

            if (ModelState.IsValid)
	  
	- Why do we need to explicitly invoke model binding?
	  If you want to limit on what can be bound, explicitly invoking model binding can be very useful.

Include & Exclude list - Prevent Unintended updates 
==========================================================================
 	- What is Unintended updates, update through view source code, if field is hidden, change by back side
	- Change to @Html.EditorFor(model => model.Name) => @Html.DisplayFor(model => model.Name)
	- Hiddend field @Html.HiddenFor(model => model.Name)
	
	- Prevent unintedde updates using include (white) and exclude (black) list
				      ------------------------	
     	[HttpPost]
        [ActionName("Edit")]
        public ActionResult Edit_Post(int id) {
            EmployeeLayer el = new EmployeeLayer();
            Employee emp  = el.Employees.Where(w => w.ID == id).Single();
            //include list
            //UpdateModel(emp, new String[]{ "ID","Gender","City" , "DateOfBirth"});

            //exclude list
            UpdateModel(emp,null,null, new String[] { "Name" });
            if (ModelState.IsValid) {
                el.SaveEmmployee(emp);
                return RedirectToAction("Index");
            }
            return View();
        }
        
	- including and excluding properties using model bind attribute	  
	  -------------------------------------------------------
        public ActionResult Edit_Post([Bind(Include="ID,Gender,City,DateOfBirth")]Employee emp)
        //public ActionResult Edit_Post([Bind(Exclude="Name")]Employee emp)
        {
            EmployeeLayer el = new EmployeeLayer();
            /*the coment below code, excute method, throw error, name is required,
             reason is, bind only pick 'ID,Gender,City,DateOfBirth' not name, so name is null in emp object*/
            emp.Name  = el.Employees.Where(w => w.ID == emp.ID).Single().Name;
            /*but still i got error, reason is Bind contains all attributes except name, so name is null,
             * but Employee object name is required, get rid "Required" name proprty it will work*/
	
	- Including and excluding properties from model binding using interfaces
	------------------------------------------------------------------------
	    public interface IEmployee {
		 int ID { get; set; }
		 string Gender { get; set; }
		 string City { get; set; }
		 DateTime? DateOfBirth { get; set; }
	    }

	    public class Employee : IEmployee {	

        [HttpPost]
        [ActionName("Edit")]
        public ActionResult Edit_Post(int id) {
            EmployeeLayers el = new EmployeeLayers();
            Employee emp = el.Employees.Single(e => e.ID == id);
            UpdateModel<IEmployee>(emp);

            if (ModelState.IsValid) { ...       	

Deleting database records using get request is bad, use always POST (@Html.BeginForm)
-------------------------------------------------------------------
	- Deleting Get, (http://localhost/MVC5/Employee/Delete/13) it will delete
        public ActionResult Delete(int id) {
            EmployeeLayers el = new EmployeeLayers();
            el.DeleteEmployee(id);
            return RedirectToAction("Index");
        }
        
        -Deleting Post, http://localhost/MVC5/Employee/Delete/13 it won't delete directly, to fix @Html.BeingForm and confirmation 
        [HttpPost]
        public ActionResult Delete(int id)
        
        @Html.ActionLink("Delete", "Delete", new { id=item.ID }) => changed to 
 	    @using (@Html.BeginForm("Delete", "Employee", new { id = item.ID })) {
                <input type="submit" value="Delete" onclick="return confirm('Do you want Delete?  @item.ID')"/>
            }   

Multiple Delete
-----------------
	- db.Employees.DeleteObject does not support EF5.0, 
	- EmployeeController.cs
        public ActionResult EmpDelete() { return View(db.Employees.ToList());}

        [HttpPost]
        public ActionResult EmpDelete(IEnumerable<int> selectedEmpId) {
            //foreach(var e in db.Employees.Where(x => selectedEmpId.Contains(x.EmployeeId)).ToList()){
            //    db.Employees.Remove(e);    
            //}
            db.Employees.RemoveRange(db.Employees.Where(x => selectedEmpId.Contains(x.EmployeeId)).ToList());
            db.SaveChanges();
            return RedirectToAction("EmpDelete");
        }

	- EmpDelete.cshtml
    @model IEnumerable<MVC5EF.Models.Employee>
        @using (Html.BeginForm())
        {
            <tbody>
                @Html.EditorForModel() 
                //Replacement of below code.
		    @*foreach(var item in Model) { 
			    <tr>
				<td><input type="checkbox" name="selectedEmpId" value="@item.EmployeeId" /> </td>
				<td>@item.EmployeeId</td>
				<td>@item.Name</td>
			    </tr>
			}*@                
            </tbody>
            <br />
        <input type="submit" value="DeleteRecords" />
        }
	</table>

	- Shared/EditorTemplates/Employee.cshtml
	@model MVC5EF.Models.Employee
	 <tr>
	    <td><input type="checkbox" name="selectedEmpId" value="@Model.EmployeeId" /> </td>
	    <td>@Model.EmployeeId</td>
	    <td>@Model.Name</td>
	</tr>
 
Search
------
	-Details.cshtml added the code
		    @using(Html.BeginForm("Index","Employee",FormMethod.Get)){
			@Html.RadioButton("searchBy", "Gender") <text>Gender</text>
			@Html.RadioButton("searchBy", "Name",true) <text>Name</text>
			<br />
			@Html.TextBox("search");<br />
			<input type="submit" value="Search" />
		    }
		@if(Model.Count()==0){ <tr><td colspan="10">No Record Found</td></tr> }
		else{ foreach (var item in Model) { @Html.DisplayFor(modelItem => item.Name)..} }
	-EmployeeController.cs

        public ActionResult Index(string searchBy, string search) {
            IEnumerable<Employee> emp;
            if (searchBy == "Gender")
                emp = db.Employees.Where(e => e.Gender == search || search == null).ToList();
            else
                emp = db.Employees.Where(e => e.Name.StartsWith(search) || search == null).ToList();
            return View(emp);
        }
Pagination - Installed PagedList.MVC from Nuget, it will also install PagedList
-----------
	- Add code EmployeeController.cs, return is IPagedList
	using PagedList;
	using PagedList.Mvc;
        // GET: Employee
        public ActionResult Index(string searchBy, string search, int? page) { //int? nullable, intial no page number
            // Search above code
            IPagedList<Employee> pemp = emp.ToList().ToPagedList(page ?? 1, 3);
            //if null?? page is 1 or selected page, toal 3 records/ page
            return View(pemp);
        }	
        - Add code Index.cshtml, return IPagedList, include using
	@using PagedList;
	@using PagedList.Mvc;
	@model IPagedList<MVC5EF.Models.Employee>        
            //@Html.DisplayNameFor(model => model.Name)		       		  
            @Html.DisplayNameFor(model => model.First().Name)  //because of IPagedList Model

	@Html.PagedListPager(Model,
	    page=> Url.Action("Index",
		new {
		    page,
		    searchBy = Request.QueryString["searchBy"],
		    search = Request.QueryString["search"]
		}),
	    new PagedListRenderOptions() {
		Display =PagedListDisplayMode.IfNeeded, //if one page, pagination won't display
		DisplayItemSliceAndTotal=true,		//display total page and current "Showing items 7 through 9 of 9.
		DisplayPageCountAndCurrentLocation=true // Page 3 0f 3.
	    }
	  )                
Sorting
-------
	-- EmployeeController.cs
        public ActionResult Index(string searchBy, string search, int? page, string sortBy) {
            ViewBag.SortName = string.IsNullOrEmpty(sortBy)?"Name desc":"";
            ViewBag.SortGender = sortBy == "Gender" ? "Gender desc":"Gender";

            var emp = db.Employees.AsQueryable();
            //AsQueryable apply function like where, tolist, pagelist
            //without AsQueryable can't acess function where, tolist, pagelist

            //search code
            switch (sortBy) { 
                case "Name desc":
                    emp = emp.OrderByDescending(x=>x.Name);
                    break;
                case "Gender desc":
                    emp = emp.OrderByDescending(x => x.Gender);
                    break;
                case "Gender":
                    emp = emp.OrderBy(x => x.Gender);
                    break;
                default:
                    emp = emp.OrderBy(x => x.Name);
                    break;
            }
            return View(emp.ToPagedList(page ?? 1, 3));
        }
	-index.cshtml
        <th>
            @Html.ActionLink("Name", "Index", new { sortBy=ViewBag.SortName,
           searchBy =Request.QueryString["searchBy"],
           search = Request.QueryString["search"]
       })
        </th>
        <th>
            @Html.ActionLink("Gender", "Index", new
                   {
                       sortBy = ViewBag.SortGender,
                       searchBy = Request.QueryString["searchBy"],
                       search = Request.QueryString["search"]
                   })
        </th>      
        ...

	@Html.PagedListPager(Model,
	    page=> Url.Action("Index",
		new{
		    ...
		    sortBy = Request.QueryString["sortBy"]
		}),
		...			    
	  )        

Using data transfer object as the model in mvc
----------------------------------------------
	-if key is not defined, creating view, throws error
	There was an error running the selected code generator: 'Unable to retrieve metada for 'MVC5EF.Models.DepartmentTotals'.
	One or more validation error were detected during model generation:
	... has no key defined. Define the for this EntityType.
	 MVC5EFModel.Context.cs => public System.Data.Entity.DbSet<MVC5EF.Models.DeptTotal> DeptTotals { get; set; }, 
	 delete, re build, i don't know, it thorws error

        public ActionResult ByDepartmentCount() {
            var departmentTotals = db.Employees.Include(e => e.Department)
                     .GroupBy(x => x.Department.Name)
                     .Select(y => new DeptTotal { Name = y.Key, Total = y.Count() })
                     .ToList()
                     .OrderByDescending(z => z.Total);
            return View(departmentTotals);
        }

	using System.ComponentModel.DataAnnotations;

	namespace MVC5EF.Models {
	    public class DeptTotal {
		[Key]
		public string Name { get; set; }
		public int Total { get; set; }
	    }
	}	  

Radio Button, when city selected, Index(string SelectedCity) will display id
---------------------------------------------------------------------------
	    public class Company {//Company.Class
		public string SelectedCity { get; set; }
		public List<Employee> CompanyCity { get { return db.Employees.ToList(); } }
	    }
	    
	[HttpGet] //HomeController.cs
	public ActionResult Index() { 
	   Company c = new Company();
	    return View(c);
	}

	[HttpPost]
	public string Index(string SelectedCity) {
		if (string.IsNullOrEmpty(company.SelectedDepartment))
			retrun "Not Select";
		else 
			return SelectedCity;
	}

	//Home.cshtml
	@model Mvc4App.Models.Company
	@using (Html.BeginForm()) {
	    foreach (var item in Model.CompanyCity) {
	       @Html.RadioButtonFor(m => m.SelectedCity, item.Id)
		@item.City
	    }
	    <br />
	    <input type="submit" />    
	}

CheckBox (isSelected bit field in sql server)
=============================================
        [HttpGet]
        public ActionResult Index(){ return View(db.Employees); }

        [HttpPost]
        public string Index(IEnumerable<Employee> emp) {
            if (emp.Count(x => x.isSelected) == 0) {
                return "You have not selected any City";
            } else {
                string iss = "";
                string not = "";
                foreach (Employee e in emp) {
                    if (e.isSelected) iss += e.City + ", ";
                    else not += e.City + ", ";
                }
                return "Selected  = " + iss + " Not Selected  = " + not;
            }
	
	- created new view in Shared Folder, Employee.cshtml, (must be same in Employee.cs file)
	@model Mvc4App.Models.Employee
	@Html.HiddenFor(x=>x.Id)
	@Html.HiddenFor(x=>x.City)

	@Html.CheckBoxFor(x=>x.isSelected)
	@Html.DisplayFor(x=>x.City)
	
	-index.cshtml
	@model IEnumerable<Mvc4App.Models.Employee>  => Employee will match the Shared view, and display here. only city check box
	@using (Html.BeginForm()){
	    @Html.EditorForModel()
	    <br />
	    <input type="submit" />
	}

Ajax - page won't refresh, only contetn
----------------------------------------
	- http://spiffygif.com/ get animated gif
	- Advantage - AJAX applications are non blocking, Better performance and reduced network traffic & No screen flicker
	- Disadvantages - cannot be bookmarked, If JavaScript is disabled, AJAX application won't work, Harder to debug
			 Search Engine like Google, Bing, Yahoo etc cannot index AJAX pages.
	- AJAX Used like 1. AutoComplete 2. AutoSave 3. Remote validation etc. 
	- AjaxOptions class - OnBegin , OnComplete , OnSuccess , OnFailure 
	- install Install-Package Microsoft.jQuery.Unobtrusive.Ajax
	- _Employee is shared view.
		public ActionResult Show() { return View();}

		public PartialViewResult All()
		{
		    Thread.Sleep(4000);   //for testing purpose to see Loading image
		    return PartialView("_Employee", db.Employees.ToList());
		}

		public PartialViewResult Top3()
		{
		    Thread.Sleep(4000);   //for testing purpose to see Loading image
		    return PartialView("_Employee", db.Employees.OrderBy(x=>x.Name).Take(3).ToList());
		}

		public PartialViewResult Bottom3()
		{
		    Thread.Sleep(4000);   //for testing purpose to see Loading image		
		    return PartialView("_Employee", db.Employees.OrderByDescending(x => x.Name).Take(3).ToList());
		}	

		<script src="~/Scripts/jquery-1.10.2.min.js" type="text/javascript"></script>
		<script src="~/Scripts/jquery.unobtrusive-ajax.min.js" type="text/javascript"></script>	
		<script>
		    function ClearResult() { $("#divEmployees").empty(); }
		    //OnBegin property can also be used to cancel the invocation of the action method. 
		    function CancelRequest() {
			if (1 == 2) { return true; }
			else {
			    alert("Your Request is Cancelled");
			    return false;
			}
		    }
		    function TotalRecords() { alert($("#tblEmployees tr").length - 1 + " Total Records");   }
		</script>
		    <div> 
			@Ajax.ActionLink("All","All", new AjaxOptions {
		       HttpMethod="GET",
		       UpdateTargetId="divEmployees",
		       InsertionMode=InsertionMode.Replace,
		       LoadingElementId = "divLoading",
		       OnBegin = "ClearResult",
		       OnSuccess = "TotalRecords",
       		       LoadingElementDuration = 3000
		   })
			 | 
			@Ajax.ActionLink("Top 3", "Top3", new AjaxOptions
		   {
		       HttpMethod = "GET",
		       UpdateTargetId = "divEmployees",
		       InsertionMode = InsertionMode.Replace,
		       LoadingElementId = "divLoading",
		       OnBegin = "CancelRequest",
		       OnSuccess = "TotalRecords"
		   })
			|
			@Ajax.ActionLink("Bottom 3", "Bottom3", new AjaxOptions
		   {
		       HttpMethod = "GET",
		       UpdateTargetId = "divEmployees",
		       InsertionMode = InsertionMode.Replace,
		       LoadingElementId = "divLoading",
		       OnBegin = "ClearResult",
		       OnSuccess = "TotalRecords"
		   })
		    </div>
		    <div id="divLoading" style="display:none"><img src="~/Images/roate.gif" /></div>
		    <div id="divEmployees"></div>
    
	- Auto Complete
	----------------
	-add jquery autocomplete css and js.
        [HttpPost]
        public ActionResult Index(string searchName) { return View(db.Employees.Where(x => x.Name.StartsWith(searchName)).ToList());}

        //Jqury Autocomplete pass term name
        public JsonResult GetEmployee(string term)
        {
            List<string> name = db.Employees.Where(x => x.Name.StartsWith(term)).Select(y => y.Name).ToList();
            return Json(name, JsonRequestBehavior.AllowGet);
        }        

        public ActionResult Index(){ return View(db.Employees.ToList());}        

	@model IEnumerable<MVC5EF.Models.Employee>
	<script src="~/Scripts/jquery-1.10.2.min.js"></script>
	<script src="~/Scripts/jquery-ui.min.js"></script>
	<link href="~/Content/jquery-ui.min.css" rel="stylesheet" />
	<script>
	    $(function () {
		$("#txtSearchID").autocomplete({
		    source: '@Url.Action("GetEmployee")',
		    minLength: 2
		});
	    });

	</script>
        @using (Html.BeginForm())
        {
            <text>Name:</text> @Html.TextBox("searchName", null, new { ID = "txtSearchID" });
        }

